{"version":3,"sources":["components/listInput.js","components/listItem.js","components/sideBar.js","components/commentsSection.js","components/commentInput.js","components/commentsItem.js","App.js","serviceWorker.js","index.js"],"names":["ListInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","value","target","addItem","item","length","match","trim","state","inputText","_this2","react_default","a","createElement","className","type","onChange","placeholder","onClick","React","Component","ListItem","id","removeItem","setActiveComment","toggleHidden","title","commentsCount","SideBar","CommentsSection","handleEnter","charCode","ctrlKey","console","log","addComment","comment","activeComment","activeItem","comments","map","key","text","onKeyPress","App","itemsCopy","items","slice","push","displayComment","saveToLocal","filter","index","inputComment","commentCopy","objectSpread","concat","getActiveItem","find","local","localStorage","setItem","JSON","stringify","isHidden","parse","getItem","window","sideBar_SideBar","listInput_ListInput","listItem_ListItem","commentsSection_CommentsSection","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.356baa80.chunk.js","sourcesContent":["import React from 'react';\r\nimport './listInput.css'\r\n\r\nexport default class ListInput extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {value: this.props.inputText};    \r\n    }\r\n\r\n    handleChange = event => this.setState({value: event.target.value})\r\n    \r\n    addItem = (item) => {\r\n        // Ensure the todo text isn't empty\r\n        if (item.length > 0 && item.match(/[a-z0-9A-Z]/i)) {\r\n          item = item.trim();  \r\n          this.props.addItem(item);\r\n          this.setState({value: ''});\r\n        }   \r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div className='list-input'>\r\n            <input type='text' value={this.state.value} onChange={this.handleChange} placeholder={'Type name here...'}/>\r\n            <button className='btn btn-primary' onClick={() => this.addItem(this.state.value)}>Add new</button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n","import React from 'react';\nimport './listItem.css'\n\nexport default class ListItem extends React.Component {\n\n    removeItem(id) {\n        this.props.removeItem(id);\n    }\n\n    render() {\n        return (\n          <li className='list-item' onClick={() => {this.props.setActiveComment(); this.props.toggleHidden()}}>\n            <h3>{this.props.item.title}</h3>\n            <span>{this.props.item.commentsCount}</span>\n            <div className='button-container'>\n                <button onClick={(event) => this.props.removeItem(this.props.id)}>Delete</button>\n            </div>\n          </li>\n        )\n    }\n}","import React from 'react';\nimport './sideBar.css'\n\nexport default class SideBar extends React.Component {\n\n    render() {\n        return (\n            <div className='sidebar'>\n              <div className='sidebar-txt'>\n                <h1>DAIRY APP</h1>\n                <p>Comment with no sense</p>\n              </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport CommentInput from './commentInput'\nimport CommentsItem from './commentsItem'\nimport './commentsSection.css';\n\nexport default class CommentsSection extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {value: ''};\n    }\n\n    handleChange = event => this.setState({value: event.target.value})\n    \n    handleEnter = event => {\n        if (event.charCode === 13 && event.ctrlKey) {\n            console.log(this.state, this.props)\n            this.addComment(this.state.value)\n        } \n    }    \n\n    addComment = comment => {\n        console.log(this.props.activeComment)\n         // Ensure the comment text isn't empty\n        if (comment.length > 0) {\n          this.props.addComment(comment);\n          this.setState({value: ''});\n        }   \n    }\n    \n    render() {\n        return (\n            <div className='comments-section'>\n                <h1>{this.props.activeItem && this.props.activeItem.title}</h1>\n                <ul>\n                      { this.props.activeItem &&\n                        this.props.activeItem.comments.map((comment) => <li key={comment.id}>{comment.text}</li>)\n                      } \n                </ul>\n                {/*<CommentsItem />*/}\n                {/*<CommentInput addComment={this.addComment}/>*/}\n                <div className='comment-input'>\n                    <div className='avatar'></div>\n                    <input type='text' value={this.state.value} onChange={this.handleChange} onKeyPress={this.handleEnter}/>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\r\nimport './commentInput.css'\r\n\r\nexport default class CommentInput extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {value: this.props.inputText};\r\n    }\r\n\r\n    handleEnter(event) {\r\n        if (event.charCode === 13 && event.ctrlKey) {\r\n          alert('KeyPress is working');\r\n        }\r\n    }    \r\n\r\n    render() {\r\n        return (\r\n            <div className='comment-input'>\r\n                <input type='text' value={this.state.value} onChange={this.handleChange} onKeyPress={this.handleEnter}/>\r\n            </div>\r\n        )\r\n    }    \r\n}","import React from 'react';\r\nimport './commentsItem.css'\r\n\r\nexport default class CommentsItem extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n          <li className='comments-item'>\r\n            <p></p>\r\n          </li>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ListInput from './components/listInput'\nimport ListItem from './components/listItem'\nimport SideBar from './components/sideBar'\nimport CommentsSection from './components/commentsSection'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      items: [\n        {\n          id: 1, \n          title: 'First item',\n          commentsCount: 0,\n          comments: [],\n        },\n        {\n          id: 2, \n          title: 'Second item',\n          commentsCount: 0,\n          comments: [],\n        },\n        {\n          id: 3, \n          title: 'Third item',\n          commentsCount: 0,\n          comments: [],\n        },\n      ],\n      activeItem: {},\n      isHidden: true\n    }\n  }\n  // Add new item to the list\n  addItem = inputText => {\n    let itemsCopy = this.state.items.slice();\n    itemsCopy.push({id: this.state.items.length + 1, title: inputText, commentsCount: 0, comments: [], displayComment: false});\n\n    this.setState({\n      items: itemsCopy\n    },\n      this.saveToLocal)\n  }\n  // Remove the item from the list: check if the clicked button id is match \n  removeItem = id =>\n    this.setState({\n      items: this.state.items.filter((item, index) => item.id !== id)\n    },\n    this.saveToLocal)\n\n  addComment = (inputComment) => {\n    // find item with id passed and select its comments array\n     const commentCopy = this.state.items.map(item => {\n       if (item.id === this.state.activeItem.id) {\n         return {\n           ...item, \n           commentsCount: item.comments.length + 1,\n           comments: item.comments.concat({id: item.comments.length + 1, text: inputComment})\n          } \n       }\n         return item\n      });\n      this.setState({\n       items: commentCopy\n     },\n       this.saveToLocal)\n   }\n\n  getActiveItem = () => this.state.items.find(item => item.id === this.state.activeItem.id)\n\n  saveToLocal = () => {\n    const local = this.state.items;\n    localStorage.setItem(\"items\", JSON.stringify(local));\n  }\n\n  componentDidMount() {\n    const items = JSON.parse( localStorage.getItem( \"items\" ) );\n    this.setState( { items } );\n}\n\n  render() {\n    console.log(this.state.items.isHidden)\n    console.log(window.localStorage)\n    return (\n      <div className='App'>\n        <SideBar />\n        <div className='flex-container'>\n          <div className='list-wrapper'>\n            <h1>Items</h1>\n            <ListInput inputText='' addItem={this.addItem}/>\n            <ul>\n              {\n                this.state.items.map((item) => \n                (<ListItem \n                    item={item} \n                    key={item.id} \n                    id={item.id} \n                    removeItem={this.removeItem} \n                    setActiveComment={() => this.setState({ activeItem: item })} \n                    toggleHidden={() => this.setState({ isHidden: false })}\n                  />\n                ))\n              }\n            </ul>\n          </div>\n            {!this.state.isHidden && <CommentsSection \n              addComment={this.addComment} \n              activeItem={this.getActiveItem()}\n            />} \n        </div>  \n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}